package dev.neuralnexus.bedapi;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.ScatteringByteChannel;
import java.nio.charset.Charset;

public interface FriendlyByteBuf {
    // TODO: Convert this to an implementation detail
    ResourceLocation readResourceLocation();

    // ByteBuf methods

    // @spotless:off
    int capacity();
    FriendlyByteBuf capacity(int i);
    int maxCapacity();
    // ByteBufAllocator alloc();
    ByteOrder order();
    FriendlyByteBuf order(ByteOrder byteOrder);
    FriendlyByteBuf unwrap();
    boolean isDirect();
    boolean isReadOnly();
    FriendlyByteBuf asReadOnly();
    int readerIndex();
    FriendlyByteBuf readerIndex(int i);
    int writerIndex();
    FriendlyByteBuf writerIndex(int i);
    FriendlyByteBuf setIndex(int i, int j);
    int readableBytes();
    int writableBytes();
    int maxWritableBytes();
    boolean isReadable();
    boolean isReadable(int i);
    boolean isWritable();
    boolean isWritable(int i);
    FriendlyByteBuf clear();
    FriendlyByteBuf markReaderIndex();
    FriendlyByteBuf resetReaderIndex();
    FriendlyByteBuf markWriterIndex();
    FriendlyByteBuf resetWriterIndex();
    FriendlyByteBuf discardReadBytes();
    FriendlyByteBuf discardSomeReadBytes();
    FriendlyByteBuf ensureWritable(int i);
    int ensureWritable(int i, boolean b);
    boolean getBoolean(int i);
    byte getByte(int i);
    short getUnsignedByte(int i);
    short getShort(int i);
    short getShortLE(int i);
    int getUnsignedShort(int i);
    int getUnsignedShortLE(int i);
    int getMedium(int i);
    int getMediumLE(int i);
    int getUnsignedMedium(int i);
    int getUnsignedMediumLE(int i);
    int getInt(int i);
    int getIntLE(int i);
    long getUnsignedInt(int i);
    long getUnsignedIntLE(int i);
    long getLong(int i);
    long getLongLE(int i);
    char getChar(int i);
    float getFloat(int i);
    double getDouble(int i);
    FriendlyByteBuf getBytes(int i, FriendlyByteBuf byteBuf);
    FriendlyByteBuf getBytes(int i, FriendlyByteBuf byteBuf, int i1);
    FriendlyByteBuf getBytes(int i, FriendlyByteBuf byteBuf, int i1, int i2);
    FriendlyByteBuf getBytes(int i, byte[] bytes);
    FriendlyByteBuf getBytes(int i, byte[] bytes, int i1, int i2);
    FriendlyByteBuf getBytes(int i, ByteBuffer byteBuffer);
    FriendlyByteBuf getBytes(int i, OutputStream outputStream, int i1) throws IOException;
    int getBytes(int i, GatheringByteChannel gatheringByteChannel, int i1) throws IOException;
    int getBytes(int i, FileChannel fileChannel, long l, int i1) throws IOException;
    CharSequence getCharSequence(int i, int i1, Charset charset);
    FriendlyByteBuf setBoolean(int i, boolean b);
    FriendlyByteBuf setByte(int i, int i1);
    FriendlyByteBuf setShort(int i, int i1);
    FriendlyByteBuf setShortLE(int i, int i1);
    FriendlyByteBuf setMedium(int i, int i1);
    FriendlyByteBuf setMediumLE(int i, int i1);
    FriendlyByteBuf setInt(int i, int i1);
    FriendlyByteBuf setIntLE(int i, int i1);
    FriendlyByteBuf setLong(int i, long l);
    FriendlyByteBuf setLongLE(int i, long l);
    FriendlyByteBuf setChar(int i, int i1);
    FriendlyByteBuf setFloat(int i, float v);
    FriendlyByteBuf setDouble(int i, double v);
    FriendlyByteBuf setBytes(int i, FriendlyByteBuf byteBuf);
    FriendlyByteBuf setBytes(int i, FriendlyByteBuf byteBuf, int i1);
    FriendlyByteBuf setBytes(int i, FriendlyByteBuf byteBuf, int i1, int i2);
    FriendlyByteBuf setBytes(int i, byte[] bytes);
    FriendlyByteBuf setBytes(int i, byte[] bytes, int i1, int i2);
    FriendlyByteBuf setBytes(int i, ByteBuffer byteBuffer);
    int setBytes(int i, InputStream inputStream, int i1) throws IOException;
    int setBytes(int i, ScatteringByteChannel scatteringByteChannel, int i1) throws IOException;
    int setBytes(int i, FileChannel fileChannel, long l, int i1) throws IOException;
    FriendlyByteBuf setZero(int i, int i1);
    int setCharSequence(int i, CharSequence charSequence, Charset charset);
    boolean readBoolean();
    byte readByte();
    short readUnsignedByte();
    short readShort();
    short readShortLE();
    int readUnsignedShort();
    int readUnsignedShortLE();
    int readMedium();
    int readMediumLE();
    int readUnsignedMedium();
    int readUnsignedMediumLE();
    int readInt();
    int readIntLE();
    long readUnsignedInt();
    long readUnsignedIntLE();
    long readLong();
    long readLongLE();
    char readChar();
    float readFloat();
    double readDouble();
    FriendlyByteBuf readBytes(int i);
    FriendlyByteBuf readSlice(int i);
    FriendlyByteBuf readRetainedSlice(int i);
    FriendlyByteBuf readBytes(FriendlyByteBuf byteBuf);
    FriendlyByteBuf readBytes(FriendlyByteBuf byteBuf, int i);
    FriendlyByteBuf readBytes(FriendlyByteBuf byteBuf, int i, int i1);
    FriendlyByteBuf readBytes(byte[] bytes);
    FriendlyByteBuf readBytes(byte[] bytes, int i, int i1);
    FriendlyByteBuf readBytes(ByteBuffer byteBuffer);
    FriendlyByteBuf readBytes(OutputStream outputStream, int i) throws IOException;
    int readBytes(GatheringByteChannel gatheringByteChannel, int i) throws IOException;
    CharSequence readCharSequence(int i, Charset charset);
    int readBytes(FileChannel fileChannel, long l, int i) throws IOException;
    FriendlyByteBuf skipBytes(int i);
    FriendlyByteBuf writeBoolean(boolean b);
    FriendlyByteBuf writeByte(int i);
    FriendlyByteBuf writeShort(int i);
    FriendlyByteBuf writeShortLE(int i);
    FriendlyByteBuf writeMedium(int i);
    FriendlyByteBuf writeMediumLE(int i);
    FriendlyByteBuf writeInt(int i);
    FriendlyByteBuf writeIntLE(int i);
    FriendlyByteBuf writeLong(long l);
    FriendlyByteBuf writeLongLE(long l);
    FriendlyByteBuf writeChar(int i);
    FriendlyByteBuf writeFloat(float v);
    FriendlyByteBuf writeDouble(double v);
    FriendlyByteBuf writeBytes(FriendlyByteBuf byteBuf);
    FriendlyByteBuf writeBytes(FriendlyByteBuf byteBuf, int i);
    FriendlyByteBuf writeBytes(FriendlyByteBuf byteBuf, int i, int i1);
    FriendlyByteBuf writeBytes(byte[] bytes);
    FriendlyByteBuf writeBytes(byte[] bytes, int i, int i1);
    FriendlyByteBuf writeBytes(ByteBuffer byteBuffer);
    int writeBytes(InputStream inputStream, int i) throws IOException;
    int writeBytes(ScatteringByteChannel scatteringByteChannel, int i) throws IOException;
    int writeBytes(FileChannel fileChannel, long l, int i) throws IOException;
    FriendlyByteBuf writeZero(int i);
    int writeCharSequence(CharSequence charSequence, Charset charset);
    int indexOf(int i, int i1, byte b);
    int bytesBefore(byte b);
    int bytesBefore(int i, byte b);
    int bytesBefore(int i, int i1, byte b);
    // int forEachByte(ByteProcessor byteProcessor);
    // int forEachByte(int i, int i1, ByteProcessor byteProcessor);
    // int forEachByteDesc(ByteProcessor byteProcessor);
    // int forEachByteDesc(int i, int i1, ByteProcessor byteProcessor);
    FriendlyByteBuf copy();
    FriendlyByteBuf copy(int i, int i1);
    FriendlyByteBuf slice();
    FriendlyByteBuf retainedSlice();
    FriendlyByteBuf slice(int i, int i1);
    FriendlyByteBuf retainedSlice(int i, int i1);
    FriendlyByteBuf duplicate();
    FriendlyByteBuf retainedDuplicate();
    int nioBufferCount();
    ByteBuffer nioBuffer();
    ByteBuffer nioBuffer(int i, int i1);
    ByteBuffer internalNioBuffer(int i, int i1);
    ByteBuffer[] nioBuffers();
    ByteBuffer[] nioBuffers(int i, int i1);
    boolean hasArray();
    byte[] array();
    int arrayOffset();
    boolean hasMemoryAddress();
    long memoryAddress();
    String toString(Charset charset);
    String toString(int i, int i1, Charset charset);
    int hashCode();
    boolean equals(Object o);
    int compareTo(FriendlyByteBuf byteBuf);
    String toString();
    FriendlyByteBuf retain(int i);
    int refCnt();
    FriendlyByteBuf retain();
    FriendlyByteBuf touch();
    FriendlyByteBuf touch(Object o);
    boolean release();
    boolean release(int i);
    // spotless:on
}
